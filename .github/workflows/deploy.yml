name: CI/CD

on:
  push:
    branches: [ "develop" ]  # develop 브랜치에 푸시되면 실행

jobs:
  build:
    name: CI - Build & Test
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Create application.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION }}" base64 -d > application.yml
          echo "${{ secrets.JWT_APPLICATION }}" base64 -d > application-jwt.yml
          echo "${{ secrets.TEST_APPLICATION }}" base64 -d > application-test.yml

      - name: Install PostgreSQL client
        run: sudo apt-get install -y postgresql-client

      - name: Build with Gradle Wrapper
        run: ./gradlew build --parallel --daemon

      - name: Save JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-jar
          path: build/libs/*.jar

  deploy:
    name: CD - Deploy to EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: built-jar
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/aloc-spring:latest

      # 🔥 SSH 키 설정 (base64 디코딩 없이 원본 그대로 저장)
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      # ✅ SSH 연결 테스트
      - name: Test SSH Connection
        run: ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo '✅ SSH 연결 성공!'"

      # ✅ Docker Hub에서 최신 이미지가 반영될 때까지 대기 후 pull
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: key.pem
          script: |
            echo "🔄 Starting Deployment on EC2..."
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            echo "🛑 Stopping and removing old container..."
            if [ "$(docker ps -q -f name=aloc-spring)" ]; then
              docker stop aloc-spring
              docker rm aloc-spring
            fi

            echo "🔍 Waiting for Docker Hub to update..."
            NEW_DIGEST=""
            while [ -z "$NEW_DIGEST" ]; do
              sleep 10
              NEW_DIGEST=$(docker manifest inspect ${{ secrets.DOCKER_USERNAME }}/aloc-spring:latest | jq -r '.config.digest')
              echo "⏳ Waiting for new image digest..."
            done

            echo "🚮 Removing old image..."
            docker image prune -af
            docker rmi ${{ secrets.DOCKER_USERNAME }}/aloc-spring:latest || true

            echo "📦 Pulling the latest image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/aloc-spring:latest || exit 1

            echo "🚀 Running new container..."
            docker run -d --name aloc-spring \
              -e TZ=Asia/Seoul \
              -p 8080:8080 \
              -v /home/ubuntu/upload/user:/app/upload \
              ${{ secrets.DOCKER_USERNAME }}/aloc-spring:latest

            echo "✅ Deployment completed!"

      # ✅ 성공 알림 (배포 성공)
      - name: Send deployment status to Discord
        if: success()
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          content: |
            🚀 **aloc-spring 배포 성공**
            **커밋한 사람:** ${{ github.actor }}
            **메시지:** ${{ github.event.head_commit.message }}

      # ❌ 실패 알림 (배포 실패)
      - name: Send deployment failure to Discord
        if: failure()
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          content: |
            ❌ **aloc-spring 배포 실패**
            **확인 필요:** 👀
            **잘못한 사람:** ${{ github.actor }}
            **🔗 [배포 로그 확인하기](https://github.com/ALOC-UOS/aloc-backend/actions/runs/${{ github.run_id }})**
            **메시지:** ${{ github.event.head_commit.message }}
